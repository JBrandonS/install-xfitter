#!/bin/bash
#####################################################################
## Configuration ####################################################

## Programs versions
### Only garenteed to be used for 'master' 
lhapdfver=6.2.3
hathorver=2.0
hoppetver=1.2.0
applgridver=1.5.34
qcdnumver=17-01-14
apfelver=3.0.4
melaver=2.0.1
apfelgridver=1.0.5
apfelxxver=4.0.0
numdiffver=5.9.0

# skip some packages depending on xfitter version
skip_mela=0
skip_apfelgrid=0

## Optional manual configurations
#MANUALCONF=1

# max number of make jobs to run, for niceness
max_jobs=4

## Option 1: Use local environment
## These settings assume that root is already in your PATH and boost lib is installed
## For versions older than 1.1.0, need to specify the location of CERNLIB
#MODE=local
#export CERN_ROOT=/usr/lib

## Option 2: Setup environment from CERN cvmfs
## These settings include compiler, cernlib and root
#MODE=cern
#gccv=4.6
#os=slc6
#arch=x86_64
#rootversion=5.34.18

# default settings
installDeps=1
useExistingDeps=0
cleanUp=1

## End of Configuration ####################################################
#####################################################################
#Check for dummies
if [[ $0 == bash || $0 = csh ]]
then
    echo "Please don't source me, I am an executable!"
    echo "Give me attributes with:"
    echo "chmod +x install-xfitter"
    echo "and run me with:"
    echo "./install-xfitter"
    return 2
fi

vers=`git ls-remote --tags https://gitlab.cern.ch/fitters/xfitter.git | sed 's|/| |g; s|\^| |' | awk '{print $4}' | uniq`

print_help () {
    echo
    echo "usage:"
    echo "$0 [Options] <version|deps>"
    echo
    echo "available versions:"
    echo "$vers"
    echo "master"
    echo
    echo "to reinstall only dependences, run:"
    echo "$0 deps"
    echo
    echo "Options"
    echo "    -h, --help"
    echo "      print this help message"
    echo
    echo "    --no-cleanup"
    echo "      do not attempt to clean up left over install files"
    echo
    echo "    --no-deps"
    echo "      do not install any dependences"
    echo
    echo "    --use-existing-deps"
    echo "      will try to use existing dependences instead of building everything"
    echo
}

if [[ -z $1 ]]
then
    print_help
    exit 1
fi

while test $# -gt 0; do
    case "$1" in
        -h|--help)
            print_help
            ;;
        --no-deps)
            installDeps=0
            shift
            ;;
        --use-existing-deps)
            useExistingDeps=1
            shift
            ;;
        --no-cleanup)
            cleanUp=0
            shift
            ;;
        *)
            mode=$1
            shift
            ;;
    esac
done

if [[ -z $mode ]]
then
    print_help
    exit 1
fi

#in deps mode, read version from the version file
if [[ $mode != "deps" ]]
then
    version=$mode
else
    if [[ ! -e version ]]
        then
        # assume it is master (e.g. for gitlab CI)
        version="master"
    else
        version=`cat version`
    fi
    echo "reinstalling dependencies for xFitter version $version"
fi
# strip the xfitter version
stripversion=`echo $version |sed "s/\.//g"`


#check that requested version exists
if [[ $version == "2.0.0" ]] || [[ $version == "2.0.1" ]]
then
    # use older QCDNUM for xfitter-2.0.0
    if [[ $version == "2.0.0" ]]; then
      qcdnumver=17-01-13
    fi
    exist=0
    for ver in ``
    do
        if [[ $version == $ver ]]
        then
            exist=1
        fi
    done

    for ver in $vers
    do
        if [[ $version == $ver ]]
        then
            exist=1
        fi
    done

    if [[ $exist == 0 ]]
    then
        echo
        echo "version $version not found, available versions:"
        echo ""
        echo "$vers"
        echo "master"
        echo
        exit 1
    fi
fi

if [[ $mode != "deps" && -e xfitter-${version} &&  -e herafitter-${version} ]]
then
    echo
    echo "xfitter-${version} already exists, remove it first"
    echo "To reinstall only dependences, run:"
    echo "$0 deps"
    echo
    exit 1
fi

# skip some packages depending on xfitter version
if [[ $version == "master" ]]; then
  skip_mela=1
  skip_apfelgrid=1
fi

#automatically detect system:
if [[ -z $MANUALCONF ]]
then
    which sw_vers >& /dev/null
    if [[ $? == 0 ]]
    then
        echo "Detected Mac OS X system"
        MODE=local
    else
        SYS=$(echo `lsb_release -i |cut -d: -f2`)
        ver=$(echo `lsb_release -r |cut -d: -f2`)
        if [[ $SYS == Scientific* && $ver == 6.* ]]
        then
            echo "Detected SL6 Linux distribution"
            MODE=cern
            gccv=4.9
            echo "Using gcc version = ${gccv}"
            os=slc6
            arch=x86_64
            rootversion=5.34.36
            boostver=1.53.0
            pyth=2.7
        elif [[ $SYS == CentOS* && $ver == 7.* ]]
        then
            echo "Detected CentOS7 Linux distribution"
            MODE=cern
            gccv=4.9
            os=centos7
            arch=x86_64
            rootversion=6.06.08
            boostver=1.53.0
            pyth=2.7
        elif [[ $SYS == Scientific* && $ver == 5.* ]]
        then
            echo "Detected SL5 Linux distribution"
            MODE=cern
            gccv=4.3
            os=slc5
            arch=x86_64
            rootversion=5.34.00
            boostver=1.48.0
            python=2.6.5
            pyth=2.6
        elif [[ $SYS == "Ubuntu" ]]
        then
            echo "Detected Ubuntu distribution"
            MODE=local
        else
            echo "Sorry, I don't recognize your system:"
            echo "$SYS $ver"
            echo "I will assume you have root installed in your system,"
            echo "gcc version >= 4.3, python, boost libraries, and wget"
            echo "If this doesn't work, and you have /cvmfs/sft.cern.ch mounted"
            echo "edit me (I am $0) and try to setup appropriate settings"
            echo "in the section: manual configuration"
            echo
            MODE="local"
        fi
    fi
fi
if [[ $MODE == "cern" ]]
    then
#    if [[ ! -e /afs/cern.ch ]]
    if [[ ! -e /cvmfs/sft.cern.ch ]]
        then
        echo
        echo "/cvmfs/sft.cern.ch not mounted, forcing local MODE"
        echo "Fasten you seat belt"
        echo "I hope you have root, gcc >= 4.8, python and boost libraries"
        echo "all installed in your system"
        echo
        MODE="local"
    fi
fi

if [[ $MODE == "cern" ]]
then
    compiler=`echo gcc${gccv} | sed "s/\.//"`
    . /cvmfs/sft.cern.ch/lcg/contrib/gcc/${gccv}/${arch}-${os}/setup.sh
    . /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/${rootversion}/${arch}-${os}-${compiler}-opt/root/bin/thisroot.sh
    if [[ $os == slc5 ]]
    then
        echo "LEGACY SL5 ! using afs"
        PYTHONBIN=/afs/cern.ch/sw/lcg/external/Python/${python}/${arch}-${os}-${compiler}-opt/bin
        PATH=$PYTHONBIN:$PATH
        export BOOST=--with-boost=/afs/cern.ch/sw/lcg/external/Boost/${boostver}_python${pyth}/${arch}-${os}-${compiler}-opt
    fi
    if [[ $os == slc6 ]]
    then
        export BOOST=--with-boost=/cvmfs/sft.cern.ch/lcg/external/Boost/${boostver}_python${pyth}/${arch}-${os}-${compiler}-opt
    fi
fi

#check some basic dependendencies before starting the installation
which git >& /dev/null
if [[ $? != 0 ]]
then
    echo "Error, git not found"
    exit 2
fi

which root >& /dev/null
if [[ $? != 0 ]]
then
    echo "Error, root not found"
    exit 2
fi

which wget >& /dev/null
if [[ $? == 0 ]]
then
    http_cmd=wget
else
    which curl >& /dev/null
    if [[ $? == 0 ]]
    then
        http_cmd=curl -sJO
    else
        echo "Error, wget or curl not found"
        exit 2
    fi
fi

#directory:
CURRENTDIR=`pwd`

#clean up
rm version setup.sh compile quickstart.readme.txt >& /dev/null
rm install.log >& /dev/null


if [[ $installDeps == 0 ]]
then
   echo "Skip installation of dependences"
else
#Make all dependencies
    [[ useExistingDeps == 0 ]] && rm -rf deps >& /dev/null
    [[ ! -d deps ]] && mkdir deps
    cd deps
#lhapdf:
    if [[ -d lhapdf ]]; then
        echo "Existing LHAPDF install found, skipping..."
    else
        echo "Installing LHAPDF $lhapdfver..."
        if (( `echo $lhapdfver |cut -d. -f1` >= 6 ))
        then
            lhapdf="LHAPDF"
            withboost=$BOOST
        else
            lhapdf="lhapdf"
        fi

    #       curl https://www.hepforge.org/archive/lhapdf/${lhapdf}-${lhapdfver}.tar.gz > ${lhapdf}-${lhapdfver}.tar.gz 2>> $CURRENTDIR/install.log
        $http_cmd https://lhapdf.hepforge.org/downloads/${lhapdf}-${lhapdfver}.tar.gz >> $CURRENTDIR/install.log 2>&1

        tar xfz ${lhapdf}-${lhapdfver}.tar.gz  >> $CURRENTDIR/install.log 2>&1
        cd ${lhapdf}-${lhapdfver}
        ./configure --prefix=$CURRENTDIR/deps/lhapdf  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        make -j $max_jobs install >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        cd - >& /dev/null

        if [[ $cleanUp == 1 ]]
        then
            rm -rf ${lhapdf}-${lhapdfver}.tar.gz  >& /dev/null
            rm -rf ${lhapdf}-${lhapdfver}  >& /dev/null
        fi
    fi

#Hathor:
    if [[ -d Hathor-${hathorver} ]]; then
        echo "Existing Hathor-${hathorver} install found, skipping..."
    else
        echo "Installing Hathor $hathorver..."
        hathor="Hathor"
        # alternative link https://www-zeuthen.desy.de/~moch/hathor/Hathor-2.0.tar.gz
        $http_cmd https://www.physik.hu-berlin.de/de/pep/tools/Hathor-${hathorver}.tar.gz >> $CURRENTDIR/install.log 2>&1

        tar xfz Hathor-${hathorver}.tar.gz  >> $CURRENTDIR/install.log 2>&1
        cd Hathor-${hathorver}/lib
        # need to provide LHAPDF directory and add -fPIC flag to CFLAGS and FFLAGS
        make LHAPDF=$CURRENTDIR/deps/lhapdf V=1 CFLAGS='-O2 -Wall -fPIC' FFLAGS='-ffixed-line-length-132 -fPIC' -j9 >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        cd - >& /dev/null

        if [[ $cleanUp == 1 ]]
        then
            rm -rf Hathor-${hathorver}.tar.gz  >& /dev/null
        fi
    fi

 #hoppet:
     if [[ -d hoppet ]]; then
        echo "Existing Hathor-${hathorver} install found, skipping..."
    else
        echo "Installing HOPPET $hoppetver..."
        $http_cmd http://hoppet.hepforge.org/downloads/hoppet-${hoppetver}.tgz >> $CURRENTDIR/install.log 2>&1

        tar xfz hoppet-${hoppetver}.tgz  >> $CURRENTDIR/install.log  2>&1
        cd hoppet-${hoppetver}
        ./configure --prefix=$CURRENTDIR/deps/hoppet  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        make -j $max_jobs install  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        cd - >& /dev/null

        if [[ $cleanUp == 1 ]]
        then
            rm -rf hoppet-${hoppetver}.tgz  >& /dev/null
            rm -rf hoppet-${hoppetver}  >& /dev/null
        fi
    fi

 # setup paths for applgrid:
    export PATH=$CURRENTDIR/deps/hoppet/bin/:$PATH
    export PATH=$CURRENTDIR/deps/lhapdf/bin/:$PATH
    export HATHOR_DIR=$CURRENTDIR/deps/Hathor-${hathorver}
    export LD_LIBRARY_PATH=$CURRENTDIR/deps/lhapdf/lib/:$LD_LIBRARY_PATH
    echo `lhapdf-config --prefix`/lib*/python*/site-packages > /tmp/xf_py1234_a
    export PYTHONPATH=$PYTHONPATH:`cat /tmp/xf_py1234_a`
    rm /tmp/xf_py1234_a

 #applgrid:
     if [[ -d applgrid ]]; then
        echo "Existing applgrid install found, skipping..."
    else
        echo "Installing APPLGRID $applgridver..."
        APPLGRID_URL=https://applgrid.hepforge.org/downloads/applgrid-"$applgridver".tgz
    #   APPLGRID_URL=https://www.hepforge.org/archive/applgrid/applgrid-"$applgridver".tgz
        $http_cmd $APPLGRID_URL >> $CURRENTDIR/install.log 2>&1

        tar xfz applgrid-$applgridver.tgz  >> $CURRENTDIR/install.log  2>&1
        cd applgrid-$applgridver
        # need to supply c++11 flag explicitly
        ./configure CXXFLAGS='--std=c++11' --prefix=$CURRENTDIR/deps/applgrid  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        make   >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        make -j $max_jobs install  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        cd - >& /dev/null

        # Fix issue with missing files, must be a better way to do this
        cp applgrid-$applgridver/src/*.o applgrid-$applgridver/src/*.pcm $CURRENTDIR/deps/applgrid/lib

        if [[ $cleanUp == 1 ]]
        then
            rm -rf applgrid-$applgridver.tgz >& /dev/null
            rm -rf applgrid-$applgridver >& /dev/null
        fi

        export PATH=$CURRENTDIR/deps/applgrid/bin/:$PATH
    fi

 #apfel
     if [[ -d apfel ]]; then
        echo "Existing apfel install found, skipping..."
    else
        echo "Installing APFEL $apfelver..."
        $http_cmd https://github.com/scarrazza/apfel/archive/${apfelver}.tar.gz >> $CURRENTDIR/install.log 2>&1

        mv ${apfelver}.tar.gz apfel-${apfelver}.tar.gz
        tar xfvz apfel-${apfelver}.tar.gz >> $CURRENTDIR/install.log 2>&1
        cd apfel-${apfelver}
        ./configure --prefix=$CURRENTDIR/deps/apfel --disable-lhapdf >> $CURRENTDIR/install.log  2>&1

        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        make -j $max_jobs install  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        cd - >& /dev/null

        if [[ $cleanUp == 1 ]]
        then
            rm -rf apfel-${apfelver}.tar.gz >& /dev/null
            rm -rf apfel-${apfelver} >& /dev/null
        fi
    # setup paths for apfel:
        export PATH=$CURRENTDIR/deps/apfel/bin/:$PATH
    fi

#Importing tables for Small-x resummation studies
    echo "Installing HELL tables..."
    $http_cmd https://www.ge.infn.it/~bonvini/hell/downloads/HELLx.v3.0.tgz >> $CURRENTDIR/install.log  2>&1
    $http_cmd https://www.ge.infn.it/~bonvini/hell/downloads/HELLx-data.v3.tgz >> $CURRENTDIR/install.log  2>&1

    tar xzf HELLx.v3.0.tgz >> $CURRENTDIR/install.log  2>&1
    tar xzf HELLx-data.v3.tgz >> $CURRENTDIR/install.log  2>&1

    cp -r HELLx/data/* $CURRENTDIR/deps/apfel/share/apfel/.

    if [[ $cleanUp == 1 ]]
    then
        rm -rf HELLx.v3.0.tgz >& /dev/null
        rm -rf HELLx-data.v3.tgz >& /dev/null
        rm -rf HELLx >& /dev/null
    fi

 #apfelgrid
     if [[ -d APFELgrid-$apfelgridver ]]; then
        echo "Existing APFELgrid-$apfelgridver install found, skipping..."
    else
        if [[ $skip_apfelgrid != 1 ]]; then
            if [ -d /cvmfs ]
            then
                lhapdf get NNPDF30_nlo_as_0118  >> $CURRENTDIR/install.log  2>&1
            else
                $http_cmd http://www.hepforge.org/archive/lhapdf/pdfsets/v6.backup/6.2.1/NNPDF30_nlo_as_0118.tar.gz  >> $CURRENTDIR/install.log  2>&1
                tar xvzpf NNPDF30_nlo_as_0118.tar.gz >> $CURRENTDIR/install.log  2>&1
                mv NNPDF30_nlo_as_0118 `lhapdf-config --datadir` >> $CURRENTDIR/install.log  2>&1
                rm NNPDF30_nlo_as_0118.tar.gz  >> $CURRENTDIR/install.log  2>&1
            fi
            
            echo "Installing APFELgrid $apfelgridver..."
        #       wget https://github.com/nhartland/APFELgrid/archive/v${apfelgridver}.tar.gz >> $CURRENTDIR/install.log 2>&1
            $http_cmd https://github.com/zenaiev/APFELgrid/archive/v${apfelgridver}.tar.gz >> $CURRENTDIR/install.log 2>&1
        
            mv v${apfelgridver}.tar.gz APFELgrid-${apfelgridver}.tar.gz
            tar xfvz APFELgrid-${apfelgridver}.tar.gz >> $CURRENTDIR/install.log 2>&1
            cd APFELgrid-${apfelgridver}
            ./setup.sh  >> $CURRENTDIR/install.log 2>&1

            make install >> $CURRENTDIR/install.log 2>&1
            # if [[ $? != 1 ]] # Oh, god. why does it exit 1 always!!!
            # then
            #     echo "Error, check install.log for details"
            #     exit 3
            # fi
            cd - >& /dev/null

            if [[ $cleanUp == 1 ]]
            then
                rm -rf APFELgrid-${apfelgridver}.tar.gz >& /dev/null
                rm -rf APFELgrid-${apfelgridver} >& /dev/null
            fi
        fi
    fi
    
 #mela
    if [[ -d mela ]]; then
        echo "Existing mela install found, skipping..."
    else
        if [[ $skip_mela != 1 ]]; then
            echo "Installing MELA $melaver..."

            $http_cmd https://github.com/vbertone/MELA/archive/${melaver}.tar.gz >> $CURRENTDIR/install.log 2>&1

            mv ${melaver}.tar.gz MELA-${melaver}.tar.gz
            tar xfvz MELA-${melaver}.tar.gz >> $CURRENTDIR/install.log 2>&1
            cd MELA-${melaver}
            ./configure --prefix=$CURRENTDIR/deps/mela  >> $CURRENTDIR/install.log  2>&1

            if [[ $? != 0 ]]
            then
                echo "Error, check install.log for details"
                exit 3
            fi
            make -j $max_jobs install  >> $CURRENTDIR/install.log  2>&1
            if [[ $? != 0 ]]
            then
                echo "Error, check install.log for details"
                exit 3
            fi
            cd - >& /dev/null

            if [[ $cleanUp == 1 ]]
            then
                rm -rf MELA-${melaver}.tar.gz >& /dev/null
                rm -rf MELA-${melaver} >& /dev/null
            fi

        # setup paths for mela:
            export PATH=$CURRENTDIR/deps/mela/bin/:$PATH
        fi
    fi
    
 #apfelxx
    if [[ -d apfelxx ]]; then
        echo "Existing apfelxx install found, skipping..."
    else
        echo "Installing APFELxx $apfelxxver..."
        $http_cmd https://github.com/vbertone/apfelxx/archive/v${apfelxxver}.tar.gz  >> $CURRENTDIR/install.log 2>&1

        mv v${apfelxxver}.tar.gz apfelxx-${apfelxxver}.tar.gz
        tar xfvz apfelxx-${apfelxxver}.tar.gz >> $CURRENTDIR/install.log 2>&1

        cd apfelxx-${apfelxxver}
        cmake -DCMAKE_INSTALL_PREFIX=$CURRENTDIR/deps/apfelxx >> $CURRENTDIR/install.log  2>&1
        make >> $CURRENTDIR/install.log  2>&1
        make install >> $CURRENTDIR/install.log  2>&1

        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        
        export PATH=$CURRENTDIR/deps/apfelxx/bin/:$PATH
        cd - >& /dev/null

        if [[ $cleanUp == 1 ]]
        then
            rm -rf apfelxx-${apfelxxver}.tar.gz >& /dev/null
            rm -rf apfelxx-${apfelxxver} >& /dev/null
        fi
    fi

 #qcdnum
    if [[ -d qcdnum ]]; then
        echo "Existing qcdnum install found, skipping..."
    else
        echo "Installing QCDNUM $qcdnumver..."
        qcdnumstripver=`echo $qcdnumver |sed "s/-//g"`
        $http_cmd http://www.nikhef.nl/user/h24/qcdnum-files/download/qcdnum${qcdnumstripver}.tar.gz >> $CURRENTDIR/install.log 2>&1
        
        tar xfz qcdnum${qcdnumstripver}.tar.gz  >> $CURRENTDIR/install.log  2>&1
        cd qcdnum-${qcdnumver}

        ./configure --prefix=$CURRENTDIR/deps/qcdnum  >> $CURRENTDIR/install.log  2>&1
        export PATH=$CURRENTDIR/deps/qcdnum/bin/:$PATH

        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        make -j $max_jobs install  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        cd - >& /dev/null

        if [[ $cleanUp == 1 ]]
        then
            rm -rf qcdnum${qcdnumstripver}.tar.gz >& /dev/null
            rm -rf qcdnum-${qcdnumver} >& /dev/null
        fi
    fi

  # numdiff
    if [[ -d numdiff ]]; then
        echo "Existing numdiff install found, skipping..."
    else
        echo "Installing numdiff $numdiffver..."
        $http_cmd http://nongnu.askapache.com/numdiff/numdiff-${numdiffver}.tar.gz >> $CURRENTDIR/install.log 2>&1
            #wget http://gnu.mirrors.pair.com/savannah/savannah/numdiff/numdiff-${numdiffver}.tar.gz >> $CURRENTDIR/install.log 2>&1

        tar xfz numdiff-${numdiffver}.tar.gz  >> $CURRENTDIR/install.log  2>&1
        cd numdiff-${numdiffver}
        ./configure  --prefix=$CURRENTDIR/deps/numdiff  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit 3
        fi
        make -j $max_jobs install  >> $CURRENTDIR/install.log  2>&1
        if [[ $? != 0 ]]
        then
            echo "Error, check install.log for details"
            exit  3
        fi
        cd - >& /dev/null

        if [[ $cleanUp == 1 ]]
        then
            rm -rf numdiff-${numdiffver}.tar.gz >& /dev/null
            rm -rf numdiff-${numdiffver} >& /dev/null
        fi
    fi
fi
cd $CURRENTDIR

 #xfitter
if [[ $mode != "deps" ]]
then
    echo "Installing xFitter $version..."


    if [[ $version == "master" ]]
    then
        git clone --depth 1 https://gitlab.cern.ch/fitters/xfitter.git >> $CURRENTDIR/install.log  2>&1
        mv xfitter xfitter-master
    else
        if [[ $http_cmd == "wget" ]]; then
            $http_cmd 'https://www.xfitter.org/xFitter/xFitter/DownloadPage?action=AttachFile&do=get&target=xfitter-'$version'.tgz' -O  xfitter-$version.tgz >> $CURRENTDIR/install.log 2>&1
        else
            $http_cmd 'https://www.xfitter.org/xFitter/xFitter/DownloadPage?action=AttachFile&do=get&target=xfitter-'$version'.tgz' >> $CURRENTDIR/install.log 2>&1
        fi

       # unpack nicely:
        rm -fr xfitter-${version}
        mkdir xfitter-${version}
        tar xfz xfitter-${version}.tgz -C xfitter-${version} --strip-components 1
    fi
fi


#make a setup run enviroment script
echo "export XFITTER_INSTALL_DIR=`pwd`" >> setup.sh
echo "export XFITTER_VERSION=$version" >> setup.sh

echo "export HATHOR_DIR=$XFITTER_INSTALL_DIR/deps/Hathor-${hathorver}"       >> setup.sh

echo `lhapdf-config --prefix`/lib*/python*/site-packages > /tmp/xf_py1234_a
echo "export PYTHONPATH=$PYTHONPATH:`cat /tmp/xf_py1234_a` " >> setup.sh
rm /tmp/xf_py1234_a

echo "export PATH=\$XFITTER_INSTALL_DIR/xfitter-$version/bin:\$PATH" >> setup.sh
echo "export PATH=\$XFITTER_INSTALL_DIR/deps/numdiff/bin/:\$PATH" >> $CURRENTDIR/setup.sh
echo "export PATH=\$XFITTER_INSTALL_DIR/deps/hoppet/bin:\$PATH" >> setup.sh
echo "export PATH=\$XFITTER_INSTALL_DIR/deps/applgrid/bin:\$PATH" >> setup.sh
echo "export PATH=\$XFITTER_INSTALL_DIR/deps/lhapdf/bin:\$PATH" >> setup.sh
echo "export PATH=\$XFITTER_INSTALL_DIR/deps/apfel/bin:\$PATH" >> setup.sh
echo "export PATH=\$XFITTER_INSTALL_DIR/deps/mela/bin:\$PATH" >> setup.sh
echo "export PATH=\$XFITTER_INSTALL_DIR/deps/apfelxx/bin:\$PATH" >> setup.sh
echo "export PATH=\$XFITTER_INSTALL_DIR/deps/qcdnum/bin:\$PATH" >> setup.sh

echo "export LD_LIBRARY_PATH=\$XFITTER_INSTALL_DIR/deps/hoppet/lib/:\$LD_LIBRARY_PATH"   >> setup.sh
echo "export LD_LIBRARY_PATH=\$XFITTER_INSTALL_DIR/deps/lhapdf/lib/:\$LD_LIBRARY_PATH"   >> setup.sh
echo "export LD_LIBRARY_PATH=\$XFITTER_INSTALL_DIR/deps/applgrid/lib/:\$LD_LIBRARY_PATH" >> setup.sh
echo "export LD_LIBRARY_PATH=\$XFITTER_INSTALL_DIR/deps/apfel/lib/:\$LD_LIBRARY_PATH" >> setup.sh
echo "export LD_LIBRARY_PATH=\$XFITTER_INSTALL_DIR/deps/mela/lib/:\$LD_LIBRARY_PATH" >> setup.sh
echo "export LD_LIBRARY_PATH=\$XFITTER_INSTALL_DIR/deps/qcdnum/lib/:\$LD_LIBRARY_PATH" >> setup.sh


if [[ $MODE == "cern" ]]
then
    echo . /cvmfs/sft.cern.ch/lcg/contrib/gcc/${gccv}/${arch}-${os}/setup.sh            >> setup.sh
    echo "cd /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/${rootversion}/${arch}-${os}-${compiler}-opt/root/" >> setup.sh
    echo ". /cvmfs/sft.cern.ch/lcg/app/releases/ROOT/${rootversion}/${arch}-${os}-${compiler}-opt/root/bin/thisroot.sh ">> setup.sh
    echo "cd -" >>setup.sh
fi

#make a compilation script
echo source ./setup.sh > compile
echo export HATHOR_DIR=\$XFITTER_INSTALL_DIR/deps/Hathor-${hathorver}       >> compile
echo export PATH=\$XFITTER_INSTALL_DIR/deps/hoppet/bin/:\$PATH       >> compile
echo export PATH=\$XFITTER_INSTALL_DIR/deps/lhapdf/bin/:\$PATH       >> compile
echo export PATH=\$XFITTER_INSTALL_DIR/deps/applgrid/bin/:\$PATH     >> compile
echo export PATH=\$XFITTER_INSTALL_DIR/deps/apfel/bin/:\$PATH     >> compile
echo export PATH=\$XFITTER_INSTALL_DIR/deps/mela/bin/:\$PATH     >> compile


if [[ $mode != "deps" ]]
then
  echo cd xfitter-\$XFITTER_VERSION                                        >> compile
fi

# check for YAML
# xfitter 2.0.0 and 2.0.1 do not need YAML
if [[ $version != "2.0.0" ]] && [[ $version != "2.0.1" ]]; then
  HAVEYAML=0
  rm -f test-tmp.cc
  echo "#include <yaml.h>" >> test-tmp.cc
  echo "yaml_document_t doc;" >> test-tmp.cc
  g++ -c -std=c++11 $CPPFLAGS test-tmp.cc >& /dev/null
  if [ `echo $?` -eq 0 ]; then
    echo "YAML yes" >> $CURRENTDIR/install.log
    HAVEYAML=1
  else
    echo "YAML no" >> $CURRENTDIR/install.log
  fi
  HAVEYAMLCPP=0
  rm -f test-tmp.cc
  echo "#include <yaml-cpp/yaml.h>" >> test-tmp.cc
  echo "YAML::Node node;" >> test-tmp.cc
  g++ -c -std=c++11 $CPPFLAGS test-tmp.cc >& /dev/null
  if [ `echo $?` -eq 0 ]; then
    echo "YAMLCPP yes" >> $CURRENTDIR/install.log
    HAVEYAMLCPP=1
  else
    echo "YAMLCPP no" >> $CURRENTDIR/install.log
  fi
  rm -f test-tmp.cc
  rm -f test-tmp.o

  if [ $HAVEYAML -eq 0 ] || [ $HAVEYAMLCPP -eq 0 ]; then
    #echo "Installing YAML"
    xfitter-${version}/tools/install-yaml
    echo source $CURRENTDIR/setup_yaml.sh >> compile
    echo source $CURRENTDIR/setup_yaml.sh >> setup.sh
  fi
fi

chmod +x compile

# configure
if [[ $mode != "deps" ]]
then
  if [[ $version == "2.0.0" ]] || [[ $version == "2.0.1" ]]; then
    echo autoreconf --install                                 >> compile
    echo ./configure --enable-applgrid --enable-lhapdf --enable-apfel --enable-apfelxx --enable-mela  --enable-apfelgrid --enable-process    >> compile
    echo make -j $max_jobs install                                    >> compile
  elif [[ $version == "master_before_PionCeres_merge" ]] || [[ $version == "test_ceres_v0.01" ]]; then
    # SZ 10.07.2019 apfelgrid produces linking error in PionCeres
    echo ./configure --enable-applgrid --enable-lhapdf --enable-hathor --enable-apfel --enable-apfelxx --enable-mela --enable-process    >> compile
    echo make -j $max_jobs install                                    >> compile
    echo autoreconf --install                                 >> compile
  else
    # cmake compilation
    echo ./make.sh install >> compile
  fi
  echo "Compiling xFitter $version..."
fi

./compile >> $CURRENTDIR/install.log  2>&1
if [[ $? != 0 ]]
then
    echo "Error, check install.log for details"
    exit 4
fi

source ./setup.sh

if [[ $mode == "deps" ]]
then
  echo "Installing xfitter dependencies is complete"
  echo "Check install.log file for details"
else
  # run test
  cd xfitter-${version}
  bin/xfitter >> $CURRENTDIR/install.log  2>&1

  if [[ $? != 0 ]]
  then
      echo "Error in testing xfitter executable, check install.log for details"
      exit 4
  fi
  cd - >& /dev/null
  echo "xFitter installation successful!"
  echo "Check install.log file for details"
  echo
  # setup a run dir
  if [[ ! -e run ]]
  then
      mkdir -p run
      if [[ $version == "2.0.0" ]] || [[ $version == "2.0.1" ]]
      then
        cp  xfitter-${version}/steering.txt \
            xfitter-${version}/ewparam.txt \
            xfitter-${version}/minuit.in.txt \
            run
        rsync -a --exclude=".*" xfitter-${version}/datafiles run/
      else
        cp  xfitter-${version}/steering.txt \
            xfitter-${version}/parameters.yaml \
            xfitter-${version}/constants.yaml \
            run
        rsync -a --exclude=".*" xfitter-${version}/datafiles run/
        rsync -a --exclude=".*" xfitter-${version}/theoryfiles run/
      fi
  else
      echo "\"run\" directory already exists, I won't touch it"
      echo
  fi

  #its the final cleanup
  #TODO: Can clean the xfitter-$version folder much better... probably a nice size reduction ~100mb
  #maybe set it to install just to xfitter and then rm xfitter-$version?
  if [[ $cleanUp == 1 ]]
  then
    rm -rf compile xfitter-$version.tgz >& /dev/null
  fi

  #quick start guide
  if [[ ! -e quickstart-readme.txt ]]
  then
      echo "for a quick start do:" >> quickstart-readme.txt
      echo >> quickstart-readme.txt
      echo "source setup.sh #setup environment" >> quickstart-readme.txt
      echo "cd run          #enter your run directory" >> quickstart-readme.txt
      echo "xfitter          #run your fit" >> quickstart-readme.txt
      echo >> quickstart-readme.txt
      echo "The fit options are controlled by the 3 files steering.txt, parameters.yaml, and constants.yaml" >> quickstart-readme.txt
      echo "Data and theory files are in datafiles directory" >> quickstart-readme.txt
      echo >> quickstart-readme.txt
      echo "After the fit, display you results with:" >> quickstart-readme.txt
      echo "xfitter-draw output/" >> quickstart-readme.txt
      echo "A file output/plots.pdf will be created" >> quickstart-readme.txt
      echo "You can find further documentation in xfitter-$version/README and xfitter-$version/doc/tex/manual/" >> quickstart-readme.txt
      echo "-----------------------------------------------------------"
      cat quickstart-readme.txt
      echo "-----------------------------------------------------------"
      echo
      echo "To read again these instructions, see quickstart-readme.txt"
      echo "Have fun!"
  fi
fi
